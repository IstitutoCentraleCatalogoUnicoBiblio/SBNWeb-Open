/*
 * Generated by XDoclet - Do not edit!
 */
package it.iccu.sbn.ejb.domain.bibliografica;

import it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority;

import java.rmi.RemoteException;

/**
 * Remote interface for Profiler.
 * @generated
 * @wtp generated
 */
public interface Profiler
   extends javax.ejb.EJBObject
{
   /**
    * <!-- begin-xdoclet-definition -->
    * @generated //TODO: Must provide implementation for bean method stub    */
   public java.lang.String getBibliotecaUtente( java.lang.String ticket )
      throws java.lang.Exception, RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated //TODO: Must provide implementation for bean method stub    */
   public it.iccu.sbn.ejb.model.unimarcmodel.SbnProfileType getProfilo( java.lang.String ticket )
      throws java.lang.Exception, RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @return la lista delle attivita abilitate per l'utente    */
   public it.iccu.sbn.ejb.model.unimarcmodel.AttivitaAbilitateType[] getAttivita( java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @return la lista delle parametrizzazioni per i documenti    */
   public it.iccu.sbn.ejb.model.unimarcmodel.ParametriDocumentiType[] getParametriDocumenti( java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @return la lista delle parametrizzazioni per le authority    */
   public it.iccu.sbn.ejb.model.unimarcmodel.ParametriAuthorityType[] getParametriAuthority( java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @return i parametri di configurazione generali    */
   public it.iccu.sbn.ejb.model.unimarcmodel.ParametriConfigType getParametriGenerali( java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated Cerca il livello dell'utente possieduto per una determinata autorithy
    * @param authority authority per la quale serve di conoscere il livello dell'utente
    * @return il livello utente per l'authority specificata    */
   public java.lang.String getLivelloAuthority( it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority authority,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated Indica se l'utente Ã¨ abilitato alla forzatura del tipo authority
    * @param authority tipo authority
    * @return true l'utente Ã¨ abilitato a fare la forzatura    */
   public boolean isForzaturaAuthority( it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority authority,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated //TODO: Must provide implementation for bean method stub    */
   public boolean isAbilitazioneAuthority( it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority authority,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated True se l'utente Ã¨ abilitato alla gestione di un determinato tipo materiale.
    * @param tipoMateriale
    * @return boolean    */
   public boolean isAbilitazioneTipoMate( java.lang.String tipoMateriale,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @param authority DOCUMENT ME!
    * @return DOCUMENT ME!    */
   public boolean getProfiloTipoAuthority( it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority authority,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated Cerca il livello dell'utente possieduto per un determinato tipo materiale
    * @param materiale tipo materiale per il quale serve conoscere il livello dell'utente
    * @return il livello utente per il tipo materiale specificato    */
   public java.lang.String getLivelloDocumento( it.iccu.sbn.ejb.model.unimarcmodel.types.SbnMateriale materiale,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated
    * @param attivitaUtente DOCUMENT ME!
    * @param sottoAttivitaUtente DOCUMENT ME!
    * @return DOCUMENT ME!    */
   public boolean isOkAttivita( java.lang.String attivitaUtente,java.lang.String sottoAttivitaUtente,java.lang.String ticket )
      throws RemoteException;

   public boolean isOkAttivita(String ticket, String codiceFunzione) throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated Indica se l'utente ha l'attivita-sottoattivita abilitata. author: manuel
    * @param attivitaUtente attivita dell'utente richiesta
    * @param sottoAttivitaUtente sottoattivita dell'utente richiesta
    * @return true l'utente ha l'abilitazione per l'attivita-sottoattivita    */
   public boolean isOkAttivitaConSottoAttivita( java.lang.String attivitaUtente,java.lang.String sottoAttivitaUtente,java.lang.String ticket )
      throws RemoteException;

   /**
    * <!-- begin-xdoclet-definition -->
    * @generated Controlla il livello di autorita di un elemento con il livello di autorita dell'utente author: manuel
    * @param livello livello di autorita di un elemento
    * @param tipoAuthority tipo authority dell'elemento
    * @return true, il livello dell'elemento e' minoe all'livello dell'utente    */
   public boolean isOkControlloLivelloAutorita( java.lang.String livello,it.iccu.sbn.ejb.model.unimarcmodel.types.SbnAuthority tipoAuthority,java.lang.String ticket )
      throws RemoteException;

   /**
    *
	* <!-- begin-xdoclet-definition -->
    * @generated Controlla se l'utente e abilitato ad eseguire l'attivita per il tipo oggetto specificato
    *
    * @param codiceAttivita
    *            Codice Attivita da verificare
    * @param livello
    *            livello di autorita assegnato dall'utente verso l'oggetto
    * @param tipoOggetto
    *            tipo elemento su cui controllare l'abilitazione ( sono accettati solo oggetti di tipo SbnMateriale,SbnAuthority)
    *
    * @param ticket
    *            valore assegnato all'utente in fase di login
    *
    * @return true, il livello dell'elemento e' minoe all'livello dell'utente
    */
   public boolean isOkAttivitaUser(String codiceAttivita,String livello, Object tipoOggetto,String ticket) throws RemoteException;
   public boolean isOkAttivitaUser(String codiceAttivita,String ticket) throws RemoteException;
   public boolean isSemanticaIndice(String cod_soggettario,String ticket) throws RemoteException;
   public int getLivelloDocumento(String natura, String tipoMateriale, String ticket) throws RemoteException,Exception;
   public boolean isLivelloDocumento(String natura, String tipoMateriale, String livelloDocumento, String ticket) throws RemoteException,Exception;
	// Modifica almaviva2 09.07.2010 Nuovo metodo per Authority (TU/UM)
   public boolean isLivelloAuthority(SbnAuthority authority, String livelloDocumento, String ticket) throws RemoteException,Exception;

	//almaviva5_20140128 evolutive google3
	public boolean isAuthoritySoloLocale(String ticket, SbnAuthority auth) throws RemoteException;
	public boolean isTipoMaterialeSoloLocale(String ticket, String tipoMateriale) throws RemoteException;

}

/*
 * Generated by XDoclet - Do not edit!
 */
package it.iccu.sbn.ejb.services.periodici;

import it.iccu.sbn.ejb.DomainEJBFactory;
import it.iccu.sbn.ejb.domain.acquisizioni.Acquisizioni;
import it.iccu.sbn.ejb.exception.ValidationException;
import it.iccu.sbn.ejb.utils.ValidazioneDati;
import it.iccu.sbn.ejb.vo.acquisizioni.FornitoreVO;
import it.iccu.sbn.ejb.vo.acquisizioni.ListaSuppFornitoreVO;
import it.iccu.sbn.periodici.ejb.Picos;
import it.iccu.sbn.periodici.exception.PicosException;
import it.iccu.sbn.periodici.vo.PicosAskFrnOperazione;
import it.iccu.sbn.periodici.vo.SchedaFornitoreVO;
import it.iccu.sbn.periodici.vo.SchedaInventarioVO;
import it.iccu.sbn.periodici.vo.SchedaPeriodicoVO;
import it.iccu.sbn.servizi.ticket.TicketChecker;
import it.iccu.sbn.util.cloning.ClonePool;

import java.net.InetAddress;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.ejb.EJBException;
import javax.ejb.SessionContext;

import org.apache.log4j.Logger;

public class PeriodiciPicosBean extends TicketChecker implements Picos {

	private static final long serialVersionUID = 2536677557241309029L;

	private static Logger log = Logger.getLogger(Picos.class);
	private Acquisizioni acquisizioni;

	public List<SchedaPeriodicoVO> xinv(String kbibl, String kinv,
			String kserie) throws PicosException, EJBException {
		List<SchedaPeriodicoVO> scheda=new ArrayList<SchedaPeriodicoVO>();
		try {
			scheda = getAcquisizioni().picosPeriodiciInv(kbibl, kinv, kserie);
		} catch (RemoteException e) {
			throw new EJBException((Exception) e.detail);
		} catch (Exception e) {

			log.error("", e);
		}
		return scheda;

	}

	public List<SchedaPeriodicoVO> xabb(String kbibl, String kordi,
			String kanno) throws PicosException, EJBException {
		List<SchedaPeriodicoVO> scheda=new ArrayList<SchedaPeriodicoVO>();
		try {
			scheda = getAcquisizioni().picosPeriodici(kbibl, kordi, kanno);
		} catch (RemoteException e) {
			throw new EJBException((Exception) e.detail);
		} catch (Exception e) {

			log.error("", e);
		}
		return scheda;
	}

	public List<SchedaInventarioVO> askInv(String kbibl, String kserie,
			String kordi, String kanno, String tipomat, String tipocirc,
			String precis, String valore, Boolean flacoll, String consisDoc,
			int annoBil, String tipoPrezzo, String prezzoBil, String sbnUser)
			throws PicosException, EJBException {
		List<SchedaInventarioVO> scheda=new ArrayList<SchedaInventarioVO>();
		try {
			String ticket = generateUniqueTicket(sbnUser.substring(0, 3), sbnUser.substring(3, 6), sbnUser.substring(6) );
			addTicket(ticket, InetAddress.getLocalHost());

			scheda = getAcquisizioni().picosPeriodiciAskInv(kbibl, kordi,
					kanno, tipomat, tipocirc, precis, valore, flacoll,
					consisDoc, annoBil, tipoPrezzo, prezzoBil, kserie, ticket);

		} catch (ValidationException ve) {
			throw new PicosException(ve.getMessage());
		} catch (RemoteException e) {
			throw new EJBException((Exception) e.detail);
		} catch (Exception e) {
			log.error("", e);
			throw new PicosException(e.getMessage());
		}
		return scheda;
	}

	public List<SchedaFornitoreVO> askFrn(String kpolo, String kbibl,
			Date dataInizio, Date dataFine, PicosAskFrnOperazione operazione,
			String[] tipoFornitore) throws PicosException, EJBException {

		ListaSuppFornitoreVO ricerca = new ListaSuppFornitoreVO();

		String codP = "";
		String codB = "";
		String loc = "0";

		if (ValidazioneDati.isFilled(kbibl)) {
			kbibl = ValidazioneDati.fillLeft(kbibl, ' ', 3);
			codP = kpolo;
			codB = kbibl;
			loc = "1";
		}

		String[] statoOrdArr = new String[0];
		ricerca.setCodPolo(codP);
		ricerca.setCodBibl(codB);

		if (ValidazioneDati.isFilled(tipoFornitore) )
			statoOrdArr = tipoFornitore;

		ricerca.setTipoFornPicosArr(statoOrdArr);
		ricerca.setLocale(loc);
		ricerca.setTipoOperazionePicos(operazione.name());
		ricerca.setDataInizioPicos(dataInizio);
		ricerca.setDataFinePicos(dataFine);

		List<FornitoreVO> listaFornitori = null;
		try {
			listaFornitori = getAcquisizioni().getRicercaListaFornitori(ricerca);
		} catch (Exception e) {
			log.error("", e);
		}

		if (!ValidazioneDati.isFilled(listaFornitori))
			return new ArrayList<SchedaFornitoreVO>(); // nessun elemento
														// trovato

		List<SchedaFornitoreVO> list = new ArrayList<SchedaFornitoreVO>();
		for (FornitoreVO frn : listaFornitori) {

			SchedaFornitoreVO f = new SchedaFornitoreVO();
			ClonePool.copyCommonProperties(f, frn);
			list.add(f);
		}

		return list;
	}

	public void ejbCreate() {
		return;
	}

	public void ejbActivate() throws EJBException, RemoteException {
		return;
	}

	public void ejbPassivate() throws EJBException, RemoteException {
		return;
	}

	public void ejbRemove() throws EJBException, RemoteException {
		return;
	}

	public void setSessionContext(SessionContext ctx) throws EJBException,
			RemoteException {
		return;
	}

	private Acquisizioni getAcquisizioni() throws Exception {

		if (acquisizioni != null)
			return acquisizioni;

		this.acquisizioni = DomainEJBFactory.getInstance().getAcquisizioni();

		return acquisizioni;
	}

}
